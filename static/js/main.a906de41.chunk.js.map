{"version":3,"sources":["ToastAutohideable.js","App.js","reportWebVitals.js","index.js"],"names":["ToastAutohideable","title","text","when","useState","show","setShow","Toast","onClose","delay","autohide","Header","className","Body","App","messages","setMessages","switchId","label","checked","switches","setSwitches","allSwitchesCheckedAchievementEarned","setAllSwitchesCheckedAchievementEarned","buttonId","disabled","buttons","setButtons","allButtonsClickedAchievementEarned","setAllButtonsClickedAchievementEarned","completedAchievements","setCompletedAchievements","progress","setProgress","allAchievementsEarned","setAllAchievementsEarned","addNewNotifications","messagesToAdd","useEffect","map","every","toggle","onSwitchChange","event","switchIdToFind","target","id","switchIndex","findIndex","newSwitches","isChecked","oldSwitch","onButtonClick","console","info","buttonIdToFind","buttonIndex","button","newButtons","oldButton","clicked","newCompletedAchievements","reduce","total","bool","setTimeout","Container","Row","Col","Form","index","Switch","onChange","Button","variant","onClick","CardGroup","Card","style","width","Text","ProgressBar","animated","now","ToastContainer","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a906de41.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Toast from 'react-bootstrap/Toast';\n\nexport default function ToastAutohideable({title, text, when}) {\n  const [show, setShow] = useState(true);\n\n  return (\n    <Toast onClose={() => setShow(false)} show={show} delay={7000} autohide>\n      <Toast.Header>\n        <strong className=\"me-auto\">{title}</strong>\n        <small>{when}</small>\n      </Toast.Header>\n      <Toast.Body>{text}</Toast.Body>\n    </Toast>\n  );\n}","import React, { useState, useEffect } from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport CardGroup from 'react-bootstrap/CardGroup';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Row from 'react-bootstrap/Row';\nimport ToastAutohideable from './ToastAutohideable';\nimport ToastContainer from 'react-bootstrap/ToastContainer';\n\nimport './App.css';\n\nconst App = () => {\n  const DEFAULT_SWITCHES = [\n    { switchId: \"switch-1\", label: \"Check this first.\", checked: false },\n    { switchId: \"switch-2\", label: \"Check this second..\", checked: false },\n    { switchId: \"switch-3\", label: \"Check this third...\", checked: false },\n  ];\n  const DEFAULT_BUTTONS = [\n    { buttonId: 'button-1', text: 'Click this first.', disabled: false },\n    { buttonId: 'button-2', text: 'Click this second..', disabled: false },\n    { buttonId: 'button-3', text: 'Click this third...', disabled: false },\n\n  ]\n  const TOTAL_ACHIEVEMENTS = 2;\n\n  const [ messages, setMessages ] = useState([]);\n  const [switches, setSwitches] = useState([...DEFAULT_SWITCHES]);\n  const [allSwitchesCheckedAchievementEarned, setAllSwitchesCheckedAchievementEarned] = useState(false);\n  const [buttons, setButtons] = useState([...DEFAULT_BUTTONS]);\n  const [allButtonsClickedAchievementEarned, setAllButtonsClickedAchievementEarned] = useState(false);\n  const [completedAchievements, setCompletedAchievements] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [allAchievementsEarned, setAllAchievementsEarned] = useState(false);\n\n  const addNewNotifications = (messagesToAdd) => {\n    setMessages([...messages, ...messagesToAdd]);\n  };\n\n  const seeIfAllSwitchesCheckedAchievementEarned = () => {\n    if (allSwitchesCheckedAchievementEarned) { return; }\n    const checkedValues = switches.map(({checked}) => (checked));\n    const areAllChecked = checkedValues.every(toggle => (toggle === true));\n    if (!areAllChecked) { return; }\n\n    addNewNotifications([{\n      title: \"Achievement Unlocked!\", text: \"Congratulations, you've checked all the switches!\", when: 'just now'\n    }]);\n    setAllSwitchesCheckedAchievementEarned(true);\n  };\n  useEffect(seeIfAllSwitchesCheckedAchievementEarned, [switches])\n\n  useEffect(() => {\n    addNewNotifications([\n      {title: 'Gamification', text: 'Complete some activities on the page to unlock some badges!', when: 'just now'},\n    ]);\n  }, []);\n\n  const onSwitchChange = (event) => {\n    // console.log('event', event);\n    // console.log('target.id', event.target.id);\n    const switchIdToFind = event.target.id;\n    const switchIndex = switches.findIndex((toggle) => (toggle.switchId === switchIdToFind));\n    if (switchIndex === -1) { return; } // Didn't find anything\n\n    const newSwitches = [...switches];\n    const isChecked = event.target.checked;\n    const oldSwitch = switches[switchIndex];\n    newSwitches[switchIndex] = {...oldSwitch, checked: isChecked};\n    setSwitches(newSwitches);\n  };\n\n  const onButtonClick = (event) => {\n    console.info('Clicked on a button');\n    const buttonIdToFind = event.target.id;\n    const buttonIndex = buttons.findIndex((button) => (button.buttonId === buttonIdToFind));\n    if (buttonIndex === -1) { return; } // Didn't find anything\n\n    const newButtons = [...buttons];\n    const oldButton = buttons[buttonIndex];\n    newButtons[buttonIndex] = {...oldButton, disabled: true};\n    setButtons(newButtons);\n  }\n\n  const seeIfAllButtonsClickedAchievementEarned = () => {\n    if (allButtonsClickedAchievementEarned) { return; }\n\n    const clickedValues = buttons.map(({disabled}) => (disabled));\n\n    const areAllClicked = clickedValues.every(clicked => (clicked === true));\n    if (!areAllClicked) { return; }\n\n    addNewNotifications([{\n      title: \"Achievement Unlocked!\", text: \"Congratulations, you've clicked all the buttons!\", when: 'just now'\n    }]);\n    setAllButtonsClickedAchievementEarned(true);\n  };\n  useEffect(seeIfAllButtonsClickedAchievementEarned, [buttons]);\n\n  // Figure out how many achievements have been earned\n  useEffect(() => {\n    const newCompletedAchievements = [allSwitchesCheckedAchievementEarned, allButtonsClickedAchievementEarned].reduce((total, bool) => total + (bool ? 1 : 0), 0);\n    setCompletedAchievements(newCompletedAchievements);\n  }, [allSwitchesCheckedAchievementEarned, allButtonsClickedAchievementEarned])\n\n  // Figure out much progress has been made on the achievements\n  useEffect(() => {\n    const newProgress = (completedAchievements / TOTAL_ACHIEVEMENTS) * 100;\n    setProgress(newProgress);\n  }, [completedAchievements]);\n\n  // Check if all achievements are earned\n  useEffect(() => {\n    if(progress < 100) { return; }\n\n    setAllAchievementsEarned(true);\n  }, [progress]);\n\n  // Show a toast if all achievements are earned\n  useEffect(() => {\n    if (!allAchievementsEarned) { return; }\n    setTimeout(() => {\n      addNewNotifications([{\n        title: \"Completionist!\", text: \"Congratulations, you've earned all the achievements!\", when: 'just now'\n      }]);\n    }, 3500)\n  }, [allAchievementsEarned]);\n\n  return (\n    <Container className=\"p-0\">\n      <Container className=\"shadow p-4 mt-3 mb-3 bg-primary text-light rounded-3\">\n        <h1 className=\"header\">Welcome To Gamification</h1>\n        <p>Complete some activities on the page to unlock some badges!</p>\n      </Container>\n\n      <Container className=\"p-0 mb-3\">\n        <Row>\n          <Col>\n            <Container className={`shadow p-3 ${allSwitchesCheckedAchievementEarned ? 'bg-success' : 'bg-info'} text-light rounded-3`}>\n              <h2 className=\"border-bottom border-light mb-4\">Check some switches</h2>\n              <Form>\n                {switches.map(({switchId, label, checked}, index) => (\n                  <Form.Switch\n                    key={index}\n                    id={switchId}\n                    label={label}\n                    checked={checked}\n                    onChange={onSwitchChange}\n                    disabled={allSwitchesCheckedAchievementEarned}\n                  />\n                ))}\n              </Form>\n            </Container>\n          </Col>\n          <Col>\n            <Container className={`shadow p-3 ${allButtonsClickedAchievementEarned ? 'bg-success' : 'bg-info'} text-light rounded-3`}>\n              <h2 className=\"border-bottom border-light mb-4\">Click some buttons</h2>\n              <div className=\"d-grid gap-2\">\n                {buttons.map(({buttonId, text, disabled}, index) => (\n                  <Button\n                    variant={disabled ? 'secondary' : 'primary'}\n                    key={index}\n                    id={buttonId}\n                    onClick={onButtonClick}\n                    disabled={disabled}\n                    className=\"shadow\"\n                  >\n                    {text}\n                  </Button>\n                ))}\n              </div>\n            </Container>\n          </Col>\n        </Row>\n      </Container>\n\n      <Container className=\"p-0 mb-3\">\n        <Row>\n          <Col>\n            <Container className=\"shadow p-3 bg-light rounded-3\">\n              <h2 className=\"border-bottom border-secondary mb-4\">Badges Earned</h2>\n              These are all the badges you've earned!\n              <CardGroup className=\"p-1 m-1\">\n              {allSwitchesCheckedAchievementEarned && (\n                <Card style={{ width: '18rem' }} className=\"bg-info text-light\">\n                  <Card.Header>🦾 Switchmaker</Card.Header>\n                  <Card.Body>\n                    <Card.Text>\n                      You toggled on all the toggle switches!\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              )}\n              {allButtonsClickedAchievementEarned && (\n                <Card style={{ width: '18rem' }} className=\"bg-info text-light\">\n                  <Card.Header>🧞‍♀️ Button Genie</Card.Header>\n                  <Card.Body>\n                    <Card.Text>\n                      You clicked all the buttons!\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              )}\n              </CardGroup>\n            </Container>\n          </Col>\n          <Col>\n            <Container className=\"shadow p-3 bg-light rounded-3\">\n              <h2 className=\"border-bottom border-secondary mb-4\">Progress</h2>\n              You've completed {completedAchievements} of {TOTAL_ACHIEVEMENTS} achievements.\n              <ProgressBar animated={!allAchievementsEarned} now={progress} className='my-2' variant={allAchievementsEarned ? 'success' : ''} />\n              {allAchievementsEarned && (\n                <h3 className=\"text-center\">🔥</h3>\n              )}\n              </Container>\n          </Col>\n        </Row>\n      </Container>\n\n      <ToastContainer position=\"top-end\" className=\"p-3\">\n        {messages && messages.map(({title, text, when}, index) => (\n          <ToastAutohideable key={index} title={title} text={text} when={when} />\n        ))}\n      </ToastContainer>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}